;;___________________________________________________________________________;;
;;  Lispy Unit Test
;;  unit_test.lispy
;;  
;;  TODO:
;;  Add test for FLONUMs to numeric procedures, type, etc...
;;___________________________________________________________________________;;


;;___________________________________________________________________________;;
;;  Primitive Syntax
;;___________________________________________________________________________;;


;;  Self-Evaluating 
;;  Fixnums, Characters,
;;  Booleans and Strings
;;_________________________;;

(test
  1
  >>> 1
  
  #\c
  >>> #\c
  
  True
  >>> True
  
  False
  >>> False
  
  "hello"
  >>> "hello"
)


;;  Symbols
;;_________________________;;

(test
  (define a 5)
  >>> void
  
  a
  >>> 5
)


;;  quote
;;_________________________;;

(test
  (quote "hello")
  >>> (quote "hello")
  
  'a
  >>> (quote a)
)


;;  set!
;;_________________________;;

(test
  (define a 5) >>> void
  a
  >>> 5
  (set! a 10) >>> void
  a
  >>> 10
)


;;  define and lambda
;;_________________________;;

(test
  ;; Variables
  (define single-variable 5) 
  >>> void
  single-variable 
  >>> 5
  
  (define lambda-variable
    (lambda (x) x))
  >>> void
  (lambda-variable 7)
  >>> 7
  
  ;; No argument procedures
  (define (no-arg) 5)
  >>> void
  (no-arg)
  >>> 5
  
  ;; Fixed arity procedures
  (define (single-arg-func x) x)
  >>> void
  (single-arg-func 3)
  >>> 3
  
  (define (two-arg-func x y) 
    (+ x y)) 
  >>> void
  (two-arg-func 35 7) 
  >>> 42
  
  ;; Variable argument functions
  (define (variable-args &rest) &rest) 
  >>> void
  (variable-args 1) 
  >>> '(1)
  (variable-args 1 2) 
  >>> '(1 2)
  (variable-args "hello" "world") 
  >>> '("hello" "world")
  
  ;; Required arguments and variable arguments
  (define (var-args-1 one &rest) one)
  >>> void
  (var-args-1 42)
  >>> 42
  (var-args-1 42 84)
  >>> 42
  
  (define (var-args-2 one &rest) &rest)
  >>> void
  (var-args-2 1)
  >>> '()
  (var-args-2 1 2)
  >>> '(2)
  (var-args-2 1 2 3)
  >>> '(2 3)
  
  ;; Internal Definitions
  (define x 5) 
  >>> void
  (define (internal)
    (define x 10)
    x)
  >>> void
  x
  >>> 5
  (internal)
  >>> 10
  x
  >>> 5
  
  ;; Recursive Procedures
  (define (add1 a-list)
    (if (null? a-list) '()
                       (cons (+ 1 (first a-list)) (add1 (rest a-list)))))
  >>> void
  (add1 '(1 2 3))
  >>> '(2 3 4)
  
  ;; Internal Recursive Procedures
  (define (rev a-list)
    (define (rev-loop a-list result)
      (if (null? a-list) result
                         (rev-loop (rest a-list) (cons (first a-list) result))))
    (rev-loop a-list '()))
  >>> void
  (rev '(1 2 3))
  >>> '(3 2 1)

  ;; Closures
  (define count
    ((lambda (total)
      (lambda ()
        (set! total (+ total 1))
        total))
       0)) ; initial total
  >>> void
  (count)
  >>> 1
  (count)
  >>> 2
  (count)
  >>> 3
)


;;  if
;;_________________________;;

(test
  (if 1 1 2)
  >>> 1
  
  (if 5 10)
  >>> 10
  
  (if False 1 2)
  >>> 2
  
  (if #\c 1 2)
  >>> 1
  
  (if "hi" 1 2)
  >>> 1
  
  (if '() 1 2)
  >>> 1
  
  (if '(1 2 3) 1 2)
  >>> 1
  
  (if False 1
   else 0)
  >>> 0
)


;;  cond and equal?
;;_________________________;;

(test
  (cond (1 2))
  >>> 2
  
  (cond ((equal? #\c #\c) 1))
  >>> 1
  
  (cond ((equal? 1 2) 10)
        ((equal? 1 3) 20)
        ((equal? 5 5) 30))
  >>> 30
  
  (cond ((equal? 1 2) 10)
        ((equal? 2 2) 20)
        ((equal? 3 4) 30))
  >>> 20

  (define a 3) >>> void
  (cond ((equal? a 1) 10)
        ((equal? a 2) 20)
        ((equal? a 3) 30)
        ((equal? a 4) 40))
  >>> 30
  
  (define b 5) >>> void
  (cond ((equal? b 1) 10)
        ((equal? b 2) 20)
        ((equal? b 3) 30)
        (else         40))
  >>> 40
  
  ;; cond does not check that 'else' is last clause
  ;; since else evaluates to True any clause afterward will
  ;;   never be evaluated
  (cond ((equal? b 1) 10)
        ((equal? b 2) 20)
        (else         30)
        ((equal? b 5) 50))
  >>> 30

)


;;  begin
;;_________________________;;

(test
  (begin 1)
  >>> 1
  
  (begin 1 2 3)
  >>> 3
  
  ;; To make sure begin evaluates all its arguments we'll use set!
  ;;   as a non-last argument and check that set! changed a's binding
  (define a 5) >>> void
  (begin 1 (set! a 10) 3)
  >>> 3
  a
  >>> 10
)


;;  let
;;_________________________;;

(test
  (let ((x 1)) x)
  >>> 1
  (let ((x 1)
        (y 2))
    y)
  >>> 2
  (let ((x 5)
        (y 10))
    (+ x y))
  >>> 15
)


;;  define-macro
;;_________________________;;

(test
  (define-macro i
    (lambda (exp)
      (list 'if (first exp) (first exp) (first (rest exp)))))
  >>> void
  (i 1 2)
  >>> 1
  (i False 2)
  >>> 2
)


;;___________________________________________________________________________;;
;;  Primitive Procedures
;;___________________________________________________________________________;;

;;  I/O
;;_______________________________________________________;;

;;  display (print without \n)
;;_________________________;;

(test
  (display "Testing")
  >>> void
)

;;  print
;;_________________________;;

(test
  (print "...")
  >>> void
)

;;  load
;;_________________________;;


;;  List Procedures
;;_______________________________________________________;;



;;  null?
;;_________________________;;

(test
  (null? '())
  >>> True
  (null? '(1))
  >>> False
  
  (null? 1)
  >>> False
  (null? #\c)
  >>> False
  (null? False)
  >>> False
)
  
;;  cons
;;_________________________;;

(test
  (cons 1 '())
  >>> '(1)
  
  (cons 1 (cons 2 '()))
  >>> '(1 2)
)


;;  length
;;_________________________;;

(test
  (length '(1))
  >>> 1
  (length '(1 2 3))
  >>> 3
  (length '(#\a #\b #\c))
  >>> 3
)


;;  Equality Procedures
;;_______________________________________________________;;

;;  is?
;;_________________________;;

(test
  (is? 1 1)
  >>> True
  (is? #\c #\c)
  >>> True
  (is? 'a 'a)
  >>> True
  (is? False False)
  >>> True

  (is? + +)
  >>> True
  (define (a) 42) >>> void
  (is? a a)
  >>> True
  
  (is? "hi" "hi")
  >>> False
  (is? '(1) '(1))
  >>> False
)


;;  equal?
;;  (test ...) uses equal? so we won't test it much here
;;_________________________;;

(test
  (equal? 1 1)
  >>> True
  (equal? "hello" 
          "hello")
  >>> True
  (equal? '(1 #\c False) 
          '(1 #\c False))
  >>> True
  
  (equal? '(1 (2 3) 4) 
          '(1 (2 3) 4))
  >>> True
  (equal? '(1 (2 (3 #\a False)) 4) 
          '(1 (2 (3 #\a False)) 4))
  >>> True
)


;;  not
;;_________________________;;

(test
  (not 1)
  >>> False
  (not False)
  >>> True
)



;;  Numeric Procedures
;;_______________________________________________________;;


;;  -
;;_________________________;;

(test
  (- 3 2)
  >>> 1
  (- 5 20)
  >>> -15
  (- 5 -5)
  >>> 10
)


;;  *
;;_________________________;;

(test
  (* 2 2)
  >>> 4
  (* 5 -5)
  >>> -25
  (* -4 -3)
  >>> 12
)


;;  /
;;_________________________;;

(test
  (/ 4 2)
  >>> 2
  (/ 5 2)
  >>> 2.500000
)


;;  Type Procedures
;;_______________________________________________________;;

;;  type
;;_________________________;;

(test
  (type '())
  >>> '("'()")
  (type True)
  >>> '("boolean")
  (type #\c)
  >>> '("character")
  (type 'a)
  >>> '("symbol")
  (type 42)
  >>> '("number" "integer")
  (type +)
  >>> '("procedure" "primitive")
  (type (lambda (x) x))
  >>> '("procedure" "compound")
  (type "hello")
  >>> '("sequence" "string")
  (type (cons 1 2))
  >>> '("sequence" "pair")
  (type '(1 2 3))
  >>> '("sequence" "pair")
)  


;;  type?
;;_________________________;;
(test
  (type? '() '())
  >>> True
  (type? True False)
  >>> True
  (type? #\c #\a)
  >>> True
  (type? 'a 's)
  >>> True
  (type? 42 666)
  >>> True
  (type? + -)
  >>> True
  (define (a) 42) >>> void
  (type? (lambda (x) x) a)
  >>> True
  (type? "hello" "goodbye")
  >>> True
  (type? (cons 1 2) '(#\a #\b))
  >>> True
  (type? '(1 2 3) (list "hi" "bye"))
  >>> True
)  


;;  ->string
;;_________________________;;

(test
  (->string 'hello)
  >>> "hello"
  (->string 42)
  >>> "42"
)


;;  ->number
;;_________________________;;

(test
  (->number "42")
  >>> 42
  (->number #\c)
  >>> 99
)


;;  ->char
;;_________________________;;

(test
  (->char "hello")
  >>> '(#\h #\e #\l #\l #\o)
  (->char 99)
  >>> #\c
)


;;  Sequence Constructors / Comprehensions
;;_____________________________________________;;
;;
;; A representation of every possible constructor expression.  Each constructor
;; should support this interface.
;;
;; constructor = list or string or vector or any other constructor
;; pair = (+ ii 1) or (= ii 1)  or any other expression not wrapped in lambda
;; lambda = (lambda (x) x)      or any other lambda expression
;; procedure = char? or odd?    or any other procedure expressed as a symbol

;;   (constructor element-1 ... element-n)

;;   (constructor from sequence)
;;   (constructor from sequence if lambda)
;;   (constructor from sequence if procedure)

;;   (constructor for ii in sequence ii)
;;   (constructor for ii in sequence pair)
;;   (constructor for ii in sequence lambda)
;;   (constructor for ii in sequence procedure)
;; 
;;   (constructor for ii in sequence if ii        ii)
;;   (constructor for ii in sequence if pair      ii)
;;   (constructor for ii in sequence if lambda    ii)
;;   (constructor for ii in sequence if procedure ii)
;; 
;;   (constructor for ii in sequence if ii        pair)
;;   (constructor for ii in sequence if pair      pair)
;;   (constructor for ii in sequence if lambda    pair)
;;   (constructor for ii in sequence if procedure pair)
;; 
;;   (constructor for ii in sequence if ii        lambda)
;;   (constructor for ii in sequence if pair      lambda)
;;   (constructor for ii in sequence if lambda    lambda)
;;   (constructor for ii in sequence if procedure lambda)
;;
;;   (constructor for ii in sequence if ii        procedure)
;;   (constructor for ii in sequence if pair      procedure)
;;   (constructor for ii in sequence if lambda    procedure)
;;   (constructor for ii in sequence if procedure procedure)
;;_______________________________________________________;;


;;  list
;;_________________________;;

(test
  (list 1)
  >>> '(1)
  (list 1 2 3)
  >>> '(1 2 3)
  
  (list from '(1 2 3))
  >>> '(1 2 3)
  (list from "hello")
  >>> '(#\h #\e #\l #\l #\o)
  
  (list from '(1 2 3) if (lambda (x) (equal? x 2)))
  >>> '(2)
  (list from "hello" if (lambda (x) (equal? x #\l)))
  >>> '(#\l #\l)
  
  (list for ii in "hello" ii)
  >>> '(#\h #\e #\l #\l #\o)
  (list for ii in "hello" (->number ii))
  >>> '(104 101 108 108 111)
  (list for ii in '(1 2 3) (lambda (x) (+ 1 x)))
  >>> '(2 3 4)
  
  (list for ii in "hello" if (equal? ii #\l) ii)
  >>> '(#\l #\l)
  (list for ii in "hello" if (lambda (x) (equal? x #\l)) ii)
  >>> '(#\l #\l)
  
  (list for ii in "hello" if (equal? ii #\l) (->number ii))
  >>> '(108 108)
  (list for ii in "hello" if (equal? ii #\l) (lambda (x) (+ 10 (->number x))))
  >>> '(118 118)
  
  (list for ii in "hello" ->number)
  >>> '(104 101 108 108 111)
)




;;  Sequence Procedures
;;_______________________________________________________;;

;;  first
;;_________________________;;

(test
  (first '(1 2 3))
  >>> 1
  (first (first '((1 2) 3)))
  >>> 1
  (first "hello")
  >>> #\h
)


;;  rest
;;_________________________;;

(test
  (rest '(1 2 3))
  >>> '(2 3)
  (rest (rest '(1 2 3)))
  >>> '(3)

  (rest "hello")
  >>> "ello"
  (rest (rest "hello"))
  >>> "llo"
)

;;  empty?
;;_________________________;;

(test
  (empty? '(1 2 3))
  >>> False
  (empty? '())
  >>> True
  (empty? "hello")
  >>> False
  (empty? "")
  >>> True
)

;;  length
;;_________________________;;

(test
  (length '(1 2 3))
  >>> 3
  (length '())
  >>> 0
  (length "hello")
  >>> 5
  (length "")
  >>> 0
)

;;  index
;;_________________________;;

(test
  (define a '(1 2 3 4 5)) >>> void
  (index a 2)
  >>> 3
  (index a -1)
  >>> 5

  (index a 0 5)
  >>> '(1 2 3 4 5)

  (index a 0 -1)
  >>> '(1 2 3 4 5)
  (index a -3 -1)
  >>> '(3 4 5)
  
  (index a 3 1)
  >>> '(3 2)
  (index a -1 0)
  >>> '(4 3 2 1)
  
  
  (define b "world") >>> void
  (index b 2)
  >>> #\r
  (index b -1)
  >>> #\d
  
  (index b 0 5)
  >>> "world"
  
  (index b 0 -1)
  >>> "world"
  (index b -3 -1)
  >>> "rld"
  
  (index b 3 0)
  >>> "row"
  (index b -1 0)
  >>> "lrow"
)


;;  Polymorphic Procedures
;;_______________________________________________________;;


;;  +
;;_________________________;;


(test
  (+ 1 1)
  >>> 2
  (+ .1 1)
  >>> (+ 1 .1)

  (+ 3 4 5)
  >>> 12
  (+ 3 4 5.5 6 7)
  >>> 25.500000
  
  (+ #\a #\b)
  >>> "ab"
  
  (+ "hello" "world")
  >>> "helloworld"
)


;;  >
;;_________________________;;

(test
  (> 2 1)
  >>> True
  (> True False)
  >>> True
  (> #\b #\a)
  >>> True
  (> "b" "a")
  >>> True
  (> 'b 'a)
  >>> True
)


;;  <
;;_________________________;;

(test
  (< 1 2)
  >>> True
  (< False True)
  >>> True
  (< #\a #\b)
  >>> True
  (< "a" "b")
  >>> True
  (< 'a 'b)
  >>> True
)


;;  >=
;;_________________________;;

(test
  (>= 1 1)
  >>> True
  (>= True True)
  >>> True
  (>= #\a #\a)
  >>> True
  (>= "a" "a")
  >>> True
  (>= 'a 'a)
  >>> True
)


;;  <=
;;_________________________;;

(test
  (<= 1 1)
  >>> True
  (<= True True)
  >>> True
  (<= #\a #\a)
  >>> True
  (<= "a" "a")
  >>> True
  (<= 'a 'a)
  >>> True
)




;;  Meta-Data Procedures
;;_______________________________________________________;;

;;  doc
;;_________________________;;

(test
  (define (a x y) "add two numbers" (+ x y)) >>> void
  (doc a)
  >>> "add two numbers"
  (define (b x y) (+ x y)) >>> void
  (doc b)
  >>> "No docstring"
)


;;  System Procedures
;;_______________________________________________________;;

;;  time
;;  Uncomment code when modifying (time) otherwise it takes too long to test
;;_________________________;;

;; (test
;;   (define (sleep n)
;;     (define start (time))
;;     (define (sleep-loop)
;;       (if (> (- (time) start) (- n 1))
;;         (- (time) start)
;;         (sleep-loop)))
;;     (sleep-loop))
;;   >>> void
;;   (sleep 1)
;;   >>> 1
;; )


;;  
;;_________________________;;

(print "Unit Test Completed Successfully")
